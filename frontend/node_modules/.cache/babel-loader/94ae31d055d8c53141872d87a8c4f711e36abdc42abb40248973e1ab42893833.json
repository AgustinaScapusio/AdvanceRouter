{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\AugustinaScapusio\\\\OneDrive\\\\Extended training\\\\AdvanceRouter\\\\frontend\\\\src\\\\pages\\\\EventsPage.jsx\",\n  _s = $RefreshSig$();\nimport EventsList from '../components/EventsList';\nimport { json, useLoaderData, defer, Await } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction EventsPage() {\n  _s();\n  const {\n    events\n  } = useLoaderData();\n  return /*#__PURE__*/_jsxDEV(Await, {\n    resolve: events\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 7,\n    columnNumber: 10\n  }, this);\n}\n_s(EventsPage, \"22Av1LduzrZxSsk8kXUUCix36lQ=\", false, function () {\n  return [useLoaderData];\n});\n_c = EventsPage;\nexport default EventsPage;\nexport function loader() {\n  defer({\n    events: loadEvents()\n  });\n}\nasync function loadEvents() {\n  const response = await fetch('http://localhost:8080/events');\n  if (!response.ok) {\n    // return {isError: true, message: \"Failed to fetch events.\"}\n    //  throw new Response(JSON.stringify({isError: true, message: \"Failed to fetch events.\"}), {status:500});\n    return json({\n      isError: true,\n      message: \"Failed to fetch events.\"\n    }, {\n      status: 500\n    });\n  } else {\n    return response;\n  }\n}\nvar _c;\n$RefreshReg$(_c, \"EventsPage\");","map":{"version":3,"names":["EventsList","json","useLoaderData","defer","Await","jsxDEV","_jsxDEV","EventsPage","_s","events","resolve","fileName","_jsxFileName","lineNumber","columnNumber","_c","loader","loadEvents","response","fetch","ok","isError","message","status","$RefreshReg$"],"sources":["C:/Users/AugustinaScapusio/OneDrive/Extended training/AdvanceRouter/frontend/src/pages/EventsPage.jsx"],"sourcesContent":["import EventsList from '../components/EventsList';\r\nimport { json, useLoaderData, defer,Await } from 'react-router-dom';\r\n\r\nfunction EventsPage() {\r\nconst {events}= useLoaderData();\r\n \r\n  return <Await resolve={events}>\r\n  </Await>;\r\n}\r\n\r\nexport default EventsPage;\r\n\r\nexport function loader() {\r\n  defer({\r\n    events: loadEvents()\r\n  });\r\n  }\r\n \r\n\r\n async function loadEvents(){\r\n\r\n  const response = await fetch('http://localhost:8080/events');\r\n\r\n  if (!response.ok) {\r\n        // return {isError: true, message: \"Failed to fetch events.\"}\r\n    //  throw new Response(JSON.stringify({isError: true, message: \"Failed to fetch events.\"}), {status:500});\r\n  return json({isError: true, message: \"Failed to fetch events.\"}, {status:500});\r\n  } else {\r\n        return response;\r\n  }\r\n }"],"mappings":";;AAAA,OAAOA,UAAU,MAAM,0BAA0B;AACjD,SAASC,IAAI,EAAEC,aAAa,EAAEC,KAAK,EAACC,KAAK,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpE,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAM;IAACC;EAAM,CAAC,GAAEP,aAAa,CAAC,CAAC;EAE7B,oBAAOI,OAAA,CAACF,KAAK;IAACM,OAAO,EAAED;EAAO;IAAAE,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACvB,CAAC;AACV;AAACN,EAAA,CALQD,UAAU;EAAA,QACHL,aAAa;AAAA;AAAAa,EAAA,GADpBR,UAAU;AAOnB,eAAeA,UAAU;AAEzB,OAAO,SAASS,MAAMA,CAAA,EAAG;EACvBb,KAAK,CAAC;IACJM,MAAM,EAAEQ,UAAU,CAAC;EACrB,CAAC,CAAC;AACF;AAGD,eAAeA,UAAUA,CAAA,EAAE;EAE1B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;IACZ;IACJ;IACF,OAAOnB,IAAI,CAAC;MAACoB,OAAO,EAAE,IAAI;MAAEC,OAAO,EAAE;IAAyB,CAAC,EAAE;MAACC,MAAM,EAAC;IAAG,CAAC,CAAC;EAC9E,CAAC,MAAM;IACD,OAAOL,QAAQ;EACrB;AACD;AAAC,IAAAH,EAAA;AAAAS,YAAA,CAAAT,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}